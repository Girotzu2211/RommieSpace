[{"E:\\AndroidProjects\\RommieSpace\\Front\\src\\index.js":"1","E:\\AndroidProjects\\RommieSpace\\Front\\src\\reportWebVitals.js":"2","E:\\AndroidProjects\\RommieSpace\\Front\\src\\App.js":"3","E:\\AndroidProjects\\RommieSpace\\Front\\src\\serviceWorker.js":"4","E:\\AndroidProjects\\RommieSpace\\Front\\src\\Home.js":"5","E:\\AndroidProjects\\RommieSpace\\Front\\src\\pages\\spaces\\Feed.page.js":"6","E:\\AndroidProjects\\RommieSpace\\Front\\src\\pages\\home\\home.page.js":"7","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\Game\\Game.compnent.js":"8","E:\\AndroidProjects\\RommieSpace\\Front\\src\\pages\\spaces\\registro.page.js":"9","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\menu\\menu.component.js":"10","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\Footer\\Footer.js":"11","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\options\\Options.js":"12","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\Video\\Video.js":"13","E:\\AndroidProjects\\RommieSpace\\Front\\src\\context\\VideoState.js":"14","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\Game\\Grid.js":"15","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\menu\\nav.component.js":"16","E:\\AndroidProjects\\RommieSpace\\Front\\src\\context\\VideoContext.js":"17","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\Game\\Button.js":"18"},{"size":643,"mtime":1653275762877,"results":"19","hashOfConfig":"20"},{"size":375,"mtime":1653275762879,"results":"21","hashOfConfig":"20"},{"size":876,"mtime":1653275762855,"results":"22","hashOfConfig":"20"},{"size":4650,"mtime":1653275762880,"results":"23","hashOfConfig":"20"},{"size":1258,"mtime":1653275762857,"results":"24","hashOfConfig":"20"},{"size":1333,"mtime":1653275762879,"results":"25","hashOfConfig":"20"},{"size":2875,"mtime":1653275762878,"results":"26","hashOfConfig":"20"},{"size":340,"mtime":1653275762871,"results":"27","hashOfConfig":"20"},{"size":3540,"mtime":1653256682396,"results":"28","hashOfConfig":"20"},{"size":667,"mtime":1653256682390,"results":"29","hashOfConfig":"20"},{"size":521,"mtime":1653275762870,"results":"30","hashOfConfig":"20"},{"size":3847,"mtime":1653275762874,"results":"31","hashOfConfig":"20"},{"size":7834,"mtime":1653275762873,"results":"32","hashOfConfig":"20"},{"size":8047,"mtime":1653275762876,"results":"33","hashOfConfig":"20"},{"size":12625,"mtime":1653275762871,"results":"34","hashOfConfig":"20"},{"size":682,"mtime":1653275762874,"results":"35","hashOfConfig":"20"},{"size":116,"mtime":1653275762875,"results":"36","hashOfConfig":"20"},{"size":512,"mtime":1653275762870,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"h994hg",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\AndroidProjects\\RommieSpace\\Front\\src\\index.js",[],"E:\\AndroidProjects\\RommieSpace\\Front\\src\\reportWebVitals.js",[],"E:\\AndroidProjects\\RommieSpace\\Front\\src\\App.js",["83"],"\r\nimport './App.css';\r\n\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nimport Home from './pages/home/home.page'\r\nimport Feed from './pages/spaces/Feed.page'\r\nimport Registro from './pages/spaces/registro.page'\r\nimport Video from \"./Home\";\r\nimport Game from \"./components/Game/Game.compnent\"\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nfunction App() {  \r\n  return (\r\n    <div className=\"App\">\r\n      <Container fluid>\r\n        <BrowserRouter>\r\n            <Routes>\r\n            <Route path=\"/\" element={<Home />} />\r\n              <Route path=\"/Feed/:Nombre\" element={<Feed />} />\r\n              <Route path=\"/Registro\" element={<Registro />} />\r\n              <Route path=\"/VideoChat\" element={<Video />} />\r\n\r\n\r\n            </Routes>\r\n        </BrowserRouter>\r\n\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","E:\\AndroidProjects\\RommieSpace\\Front\\src\\serviceWorker.js",[],"E:\\AndroidProjects\\RommieSpace\\Front\\src\\Home.js",["84","85","86"],"import { useEffect } from \"react\";\r\n\r\nimport Video from \"./components/Video/Video\";\r\nimport VideoState from \"./context/VideoState\";\r\n\r\nimport Options from \"./components/options/Options\";\r\nimport Footer from \"./components/Footer/Footer\";\r\n\r\nimport Menu from './components/menu/menu.component'\r\nimport Game from './components/Game/Game.compnent'\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport \"./App.css\";\r\n\r\nconst Home = () => {\r\n  useEffect(() => {\r\n    if (!navigator.onLine) alert(\"Connect to internet!\");\r\n  }, [navigator]);\r\n \r\n useEffect(()=>{\r\n    var cookies = document.cookie.split(\";\");\r\n\r\n    for (var i = 0; i < cookies.length; i++) {  \r\n        var cookie = cookies[i];\r\n        var eqPos = cookie.indexOf(\"=\");\r\n        var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;\r\n        document.cookie = name + \"=;expires=Thu, 01 Jan 1970 00:00:00 GMT\";\r\n    }\r\n }, [])\r\n  return (\r\n    <VideoState>\r\n      <Menu/>\r\n      <Row>\r\n        <Col sm={1}>\r\n        </Col>\r\n        <Col sm={5} >\r\n        <Game />\r\n        </Col>\r\n\r\n        <Col sm={6} className='justify-content-start text-start'>\r\n        <Video />\r\n        </Col>\r\n      </Row>\r\n      \r\n    </VideoState>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","E:\\AndroidProjects\\RommieSpace\\Front\\src\\pages\\spaces\\Feed.page.js",["87","88","89","90","91","92"],"import React from 'react';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Footer from \"../../components/Footer/Footer\";\r\nimport Options from \"../../components/options/Options\";\r\n\r\nimport Video from \"../../components/Video/Video\";\r\n\r\n\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport Menu from '../../components/menu/menu.component'\r\n\r\nimport axios from 'axios';\r\n\r\nimport {\r\n    useNavigate,\r\n    useParams,\r\n  } from \"react-router-dom\";\r\n\r\n\r\nfunction withParams(Component) {\r\n    return props => <Component {...props} params={useParams()} />;\r\n}\r\n\r\n\r\nclass Feed extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = {\r\n            Nombre: this.props.params.Nombre\r\n        }\r\n        console.log(this.props);\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n        <>\r\n            <Menu/>\r\n\r\n            <Row>\r\n\r\n                <Col sm={2}></Col>\r\n\r\n\r\n                <Col sm={8}>\r\n                    \r\n                <h1>\r\n                    Bienvenido {this.state.Nombre}\r\n                </h1>\r\n                <Footer/>\r\n                </Col>\r\n                <Col sm={2}></Col>\r\n            </Row>\r\n            \r\n        </>);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default withParams(Feed);\r\n","E:\\AndroidProjects\\RommieSpace\\Front\\src\\pages\\home\\home.page.js",["93","94","95"],"import React from 'react';\r\nimport logo from './../../img/icons.png';\r\nimport './../../Login.css';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, FormGroup } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Ingresar extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            user:\"\",\r\n            password:\"\"\r\n        };\r\n\r\n    }\r\n\r\n    handleUser(event){\r\n        let state = this.state;\r\n        state.user =  event.target.value;\r\n        this.setState(state);\r\n    }\r\n    handlePwd(event){\r\n        let state = this.state;\r\n        state.password =  event.target.value;\r\n        this.setState(state);\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n\r\n        axios.get('http://localhost:5000/login',  {\r\n            params: {\r\n               nombre: this.state.user,\r\n               pwd:this.state.password\r\n            }\r\n          }).then( response =>{\r\n            window.location=\"/Feed/\"+response.data[0].nombre\r\n                \r\n        }).catch(function (error) {\r\n            alert(\"ERROR: \" + error.response.data)\r\n\r\n        })\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n        <>           \r\n        <div className=\"Login\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1>\r\n            ¡Bienvenido de vuelta!\r\n            </h1>\r\n            <Form onSubmit={this.handleSubmit.bind(this)}>\r\n                <Form.Group size=\"lg\" controlId=\"email\">\r\n                <Form.Label className='justify-content-start text-start'>\r\n                    Email\r\n                </Form.Label>\r\n                <Form.Control\r\n                    autoFocus\r\n                    required\r\n                    value={this.state.user}\r\n                    type=\"email\"\r\n                    onChange={this.handleUser.bind(this)}\r\n                />\r\n                </Form.Group>\r\n                <Form.Group size=\"lg\" controlId=\"password\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control\r\n                    required\r\n                    type=\"password\"\r\n                    value={this.state.password}\r\n                    onChange={this.handlePwd.bind(this)}\r\n                />\r\n                </Form.Group>\r\n                \r\n                <Button block size=\"lg\" type=\"submit\" className='my-2'>\r\n                    Login\r\n                </Button>\r\n                <Button variant=\"light\" className='mx-4' size='lg'>\r\n                        <Link to={\"/Registro\"}>\r\n                        ¿Aún no tienes cuenta?\r\n                        </Link>\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Ingresar;","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\Game\\Game.compnent.js",[],"E:\\AndroidProjects\\RommieSpace\\Front\\src\\pages\\spaces\\registro.page.js",["96","97","98","99","100"],"import React from 'react';\r\nimport logo from './../../img/icons.png';\r\nimport './../../Login.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nimport { Link, Navigate } from \"react-router-dom\";\r\nimport { Form, FormGroup } from 'react-bootstrap';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Home extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            nombre:\"\",\r\n            correo:\"\",\r\n            pwd:\"\"\r\n\r\n        };\r\n\r\n    }\r\n\r\n    handleName(event){\r\n        let state = this.state;\r\n        state.nombre =  event.target.value;\r\n        this.setState(state);\r\n    }\r\n    handleMail(event){\r\n        let state = this.state;\r\n        state.correo =  event.target.value;\r\n        this.setState(state);\r\n    }\r\n\r\n    handlePwd(event){\r\n        let state = this.state;\r\n        state.pwd =  event.target.value;\r\n        this.setState(state);\r\n    }\r\n\r\n    handleSubmit(event){\r\n        event.preventDefault();\r\n\r\n        axios.post('http://localhost:5000/nuevo_usuario', this.state).\r\n            then( function (){\r\n                alert(\"Usuario Registrado !!!\");\r\n                window.location = \"/\"\r\n        }).catch(function (error) {\r\n               alert(\"Error inesperado !!!\");\r\n             \r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    render () {\r\n        return (\r\n        <>           \r\n        <div className=\"Login\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\"/>\r\n            <h1>\r\n            Crear una cuenta\r\n            </h1>\r\n            <br></br>\r\n            <Form onSubmit={this.handleSubmit.bind(this)}>\r\n                <Form.Group className=\"mb-3 text-start\">\r\n                    <Form.Label>\r\n                        Nombre Completo\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type=\"text\" \r\n                        placeholder=\"Nombre\" \r\n                        value={this.state.nombre}\r\n                        onChange={this.handleName.bind(this)}\r\n                    />\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-3 text-start\">\r\n                    <Form.Label>\r\n                        Correo\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type=\"email\" \r\n                        placeholder=\"Email\" \r\n                        value={this.state.correo}\r\n                        onChange={this.handleMail.bind(this)}\r\n                    />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3 text-start\">\r\n                    <Form.Label>\r\n                        Contraseña\r\n                    </Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type=\"password\"\r\n                        value={this.pwd}\r\n                        onChange={this.handlePwd.bind(this)}\r\n                    />\r\n                </Form.Group>\r\n\r\n                \r\n                <Button block size=\"lg\" type=\"submit\" className='my-2' >\r\n                    Registrarse\r\n                </Button>\r\n                <Button variant=\"light\" className='mx-4' size='lg'>\r\n                        <Link to={\"/\"}>\r\n                        ¿Ya tienes cuenta?\r\n                        </Link>\r\n                    </Button>\r\n            </Form>\r\n        </div>\r\n\r\n        </>);\r\n    }\r\n}\r\n\r\nexport default Home;","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\menu\\menu.component.js",[],"E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\Footer\\Footer.js",[],"E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\options\\Options.js",["101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121"],"import React, { useState, useContext, useEffect, useRef } from \"react\";\r\nimport { Input, Button, Tooltip, Modal, message } from \"antd\";\r\nimport Phone from \"../../assests/phone.gif\";\r\nimport Teams from \"../../assests/teams.mp3\";\r\nimport * as classes from \"./Options.module.css\";\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\r\nimport VideoContext from \"../../context/VideoContext\";\r\nimport Hang from \"../../assests/hang.svg\";\r\nimport {\r\n  TwitterIcon,\r\n  TwitterShareButton,\r\n  WhatsappShareButton,\r\n  WhatsappIcon,\r\n  FacebookIcon,\r\n  FacebookShareButton,\r\n} from \"react-share\";\r\nimport {\r\n  UserOutlined,\r\n  CopyOutlined,\r\n  InfoCircleOutlined,\r\n  PhoneOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { socket } from \"../../context/VideoState\";\r\n\r\nconst Options = () => {\r\n  const [idToCall, setIdToCall] = useState(\"\");\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const Audio = useRef();\r\n  const {\r\n    call,\r\n    callAccepted,\r\n    myVideo,\r\n    userVideo,\r\n    stream,\r\n    name,\r\n    setName,\r\n    callEnded,\r\n    me,\r\n    callUser,\r\n    leaveCall,\r\n    answerCall,\r\n    otherUser,\r\n    setOtherUser,\r\n    leaveCall1,\r\n  } = useContext(VideoContext);\r\n\r\n  useEffect(() => {\r\n    if (isModalVisible) {\r\n      Audio?.current?.play();\r\n    } else Audio?.current?.pause();\r\n  }, [isModalVisible]);\r\n\r\n  const showModal = (showVal) => {\r\n    setIsModalVisible(showVal);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n    leaveCall1();\r\n    window.location.reload();\r\n  };\r\n  useEffect(() => {\r\n    if (call.isReceivingCall && !callAccepted) {\r\n      setIsModalVisible(true);\r\n      setOtherUser(call.from);\r\n    } else setIsModalVisible(false);\r\n  }, [call.isReceivingCall]);\r\n\r\n  return (\r\n    <div className={classes.options}>\r\n      <div style={{ marginBottom: \"0.5rem\" }}>\r\n        <h2>Account Info</h2>\r\n        <Input\r\n          size=\"large\"\r\n          placeholder=\"Your name\"\r\n          prefix={<UserOutlined />}\r\n          maxLength={15}\r\n          suffix={<small>{name.length}/15</small>}\r\n          value={name}\r\n          onChange={(e) => {\r\n            setName(e.target.value);\r\n            localStorage.setItem(\"name\", e.target.value);\r\n          }}\r\n          className={classes.inputgroup}\r\n        />\r\n\r\n        <div className={classes.share_options}>\r\n          <CopyToClipboard text={me}>\r\n            <Button\r\n              type=\"primary\"\r\n              icon={<CopyOutlined />}\r\n              className={classes.btn}\r\n              tabIndex=\"0\"\r\n              onClick={() => message.success(\"Code copied successfully!\")}\r\n            >\r\n              Copy code\r\n            </Button>\r\n          </CopyToClipboard>\r\n\r\n          <div className={classes.share_social}>\r\n            <WhatsappShareButton\r\n              url={`https://video-chat-mihir.vercel.app/`}\r\n              title={`Join this meeting with the given code \"${me}\"\\n`}\r\n              separator=\"Link: \"\r\n              className={classes.share_icon}\r\n            >\r\n              <WhatsappIcon size={26} round />\r\n            </WhatsappShareButton>\r\n            <FacebookShareButton\r\n              url={`https://video-chat-mihir.vercel.app/`}\r\n              title={`Join this meeting with the given code \"${me}\"\\n`}\r\n              className={classes.share_icon}\r\n            >\r\n              <FacebookIcon size={26} round />\r\n            </FacebookShareButton>\r\n            <TwitterShareButton\r\n              url={`https://video-chat-mihir.vercel.app/`}\r\n              title={`Join this meeting with the given code  \"${me}\"\\n`}\r\n              className={classes.share_icon}\r\n            >\r\n              <TwitterIcon size={26} round className={classes.share_border} />\r\n            </TwitterShareButton>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Options;\r\n","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\Video\\Video.js",["122","123","124","125","126","127","128","129","130","131","132","133"],"import React, { useContext, useEffect, useState, useRef } from \"react\";\r\nimport VideoContext from \"../../context/VideoContext\";\r\nimport \"./Video.css\";\r\nimport { Card, Modal, Button, Input, notification, Avatar } from \"antd\";\r\nimport Man from \"../../assests/man.svg\";\r\nimport VideoIcon from \"../../assests/video.svg\";\r\nimport { io } from \"socket.io-client\";\r\nimport VideoOff from \"../../assests/video-off.svg\";\r\n// import Profile from \"../../assests/profile.svg\";\r\nimport Msg_Illus from \"../../assests/msg_illus.svg\";\r\nimport Msg from \"../../assests/msg.svg\";\r\nimport ScreenShare from '../../assests/share_screen.svg'\r\nimport { UserOutlined, MessageOutlined } from \"@ant-design/icons\";\r\n\r\n\r\nimport { MdSettingsVoice } from \"react-icons/md\";\r\nimport UserLog from \"../../img/user.png\";\r\n\r\n\r\nimport { socket } from \"../../context/VideoState\";\r\n\r\n// const socket = io()\r\nconst { Search } = Input;\r\nconst Video = () => {\r\n  const {\r\n    call,\r\n    callAccepted,\r\n    myVideo,\r\n    userVideo,\r\n    stream,\r\n    name,\r\n    setName,\r\n    callEnded,\r\n    me,\r\n    callUser,\r\n    leaveCall,\r\n    answerCall,\r\n    sendMsg: sendMsgFunc,\r\n    msgRcv,\r\n    chat,\r\n    setChat,\r\n    userName,\r\n    myVdoStatus,\r\n    screenShare,\r\n    fullScreen,\r\n    handleScreenSharing,\r\n    userVdoStatus,\r\n    updateVideo,\r\n    myMicStatus,\r\n    userMicStatus,\r\n    updateMic,\r\n  } = useContext(VideoContext);\r\n\r\n  const [sendMsg, setSendMsg] = useState(\"\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  socket.on(\"msgRcv\", ({ name, msg: value, sender }) => {\r\n    let msg = {};\r\n    msg.msg = value;\r\n    msg.type = \"rcv\";\r\n    msg.sender = sender;\r\n    msg.timestamp = Date.now();\r\n    setChat([...chat, msg]);\r\n  });\r\n\r\n  const dummy = useRef();\r\n\r\n  useEffect(() => {\r\n    if (dummy?.current) dummy.current.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [chat]);\r\n\r\n  const showModal = (showVal) => {\r\n    setIsModalVisible(showVal);\r\n  };\r\n\r\n  const onSearch = (value) => {\r\n    if (value && value.length) sendMsgFunc(value);\r\n    setSendMsg(\"\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (msgRcv.value && !isModalVisible) {\r\n      notification.open({\r\n        message: \"\",\r\n        description: `${msgRcv.sender}: ${msgRcv.value}`,\r\n        icon: <MessageOutlined style={{ color: \"#108ee9\" }} />,\r\n      });\r\n    }\r\n  }, [msgRcv]);\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      {stream ? (\r\n        <div\r\n          style={{ textAlign: \"start\" }}\r\n          className=\"card\"\r\n          id={callAccepted && !callEnded ? \"video1\" : \"video3\"}\r\n        >\r\n          <div style={{ height: \"2rem\" }}>\r\n            <h3>Video poner nombre usuario</h3> \r\n          </div>\r\n          <div className=\"video-avatar-container\">\r\n            <video\r\n              playsInline\r\n              muted\r\n              onClick={fullScreen}\r\n              ref={myVideo}\r\n              autoPlay\r\n              className=\"video-active\"\r\n              style={{\r\n                opacity: `${myVdoStatus ? \"1\" : \"0\"}`,\r\n              }}\r\n            />\r\n\r\n            <Avatar\r\n              style={{\r\n                backgroundColor: \"#5e60e7\",\r\n                position: \"absolute\",\r\n                opacity: `${myVdoStatus ? \"-1\" : \"2\"}`,\r\n              }}\r\n              size={98}\r\n              icon={!name && UserLog}\r\n            >\r\n              {name}\r\n            </Avatar>\r\n          </div>\r\n\r\n          <div className=\"iconsDiv\">\r\n            <div\r\n              className=\"icons\"\r\n              onClick={() => {\r\n                updateMic();\r\n              }}\r\n              tabIndex=\"0\"\r\n            >\r\n              <MdSettingsVoice />\r\n              <i\r\n                className={`fa fa-microphone${myMicStatus ? \"\" : \"-slash\"}`}\r\n                style={{ transform: \"scaleX(-1)\" }}\r\n                aria-label={`${myMicStatus ? \"mic on\" : \"mic off\"}`}\r\n                aria-hidden=\"true\"\r\n              ></i>\r\n            </div>\r\n\r\n            {callAccepted && !callEnded && (\r\n              <div\r\n                className=\"icons\"\r\n                onClick={() => {\r\n                  setIsModalVisible(!isModalVisible);\r\n                }}\r\n                tabIndex=\"0\"\r\n              >\r\n                <img src={Msg} alt=\"chat icon\" />\r\n              </div>\r\n            )}\r\n            <Modal\r\n              title=\"Chat\"\r\n              footer={null}\r\n              visible={isModalVisible}\r\n              onOk={() => showModal(false)}\r\n              onCancel={() => showModal(false)}\r\n              style={{ maxHeight: \"100px\" }}\r\n            >\r\n              {chat.length ? (\r\n                <div className=\"msg_flex\">\r\n                  {chat.map((msg) => (\r\n                    <div\r\n                      className={msg.type === \"sent\" ? \"msg_sent\" : \"msg_rcv\"}\r\n                    >\r\n                      {msg.msg}\r\n                    </div>\r\n                  ))}\r\n                  <div ref={dummy} id=\"no_border\"></div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"chat_img_div\">\r\n                  <img src={Msg_Illus} alt=\"msg_illus\" className=\"img_illus\" />\r\n                </div>\r\n              )}\r\n              <Search\r\n                placeholder=\"your message\"\r\n                allowClear\r\n                className=\"input_msg\"\r\n                enterButton=\"Send 🚀\"\r\n                onChange={(e) => setSendMsg(e.target.value)}\r\n                value={sendMsg}\r\n                size=\"large\"\r\n                onSearch={onSearch}\r\n              />\r\n            </Modal>\r\n            {callAccepted && !callEnded && (\r\n              <div\r\n                className=\"icons\"\r\n                onClick={() => handleScreenSharing()} \r\n                tabIndex=\"0\"\r\n              >\r\n                <img src={ScreenShare} alt=\"share screen\" />\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"icons\" onClick={() => updateVideo()} tabIndex=\"0\">\r\n              {myVdoStatus ? (\r\n                <img src={VideoIcon} alt=\"video on icon\" />\r\n              ) : (\r\n                <img src={VideoOff} alt=\"video off icon\" />\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"bouncing-loader\">\r\n          <div></div>\r\n          <div></div>\r\n          <div></div>\r\n        </div>\r\n      )}\r\n\r\n      {callAccepted && !callEnded && userVideo && (\r\n        <div className=\"card2\" style={{ textAlign: \"center\" }} id=\"video2\">\r\n          <div style={{ height: \"2rem\" }}>\r\n            <h3>{userVdoStatus && (call.name || userName)}</h3>\r\n          </div>\r\n\r\n          <div className=\"video-avatar-container\">\r\n            <video\r\n              playsInline\r\n              ref={userVideo}             \r\n              onClick={fullScreen}\r\n              autoPlay\r\n              className=\"video-active\"\r\n              style={{\r\n                opacity: `${userVdoStatus ? \"1\" : \"0\"}`,\r\n              }}\r\n            />\r\n\r\n            <Avatar\r\n              style={{\r\n                backgroundColor: \"#116\",\r\n                position: \"absolute\",\r\n                opacity: `${userVdoStatus ? \"-1\" : \"2\"}`,\r\n              }}\r\n              size={98}\r\n              icon={!(userName || call.name) && UserLog}\r\n            >\r\n              {userName || call.name}\r\n            </Avatar>\r\n            {!userMicStatus && (\r\n              <i\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: \"0\",\r\n                  left: \"0\",\r\n                  padding: \"0.3rem\",\r\n                  backgroundColor: \"#fefefebf\",\r\n                }}\r\n                className=\"fad fa-volume-mute fa-2x\"\r\n                aria-hidden=\"true\"\r\n                aria-label=\"microphone muted\"\r\n              ></i>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Video;\r\n","E:\\AndroidProjects\\RommieSpace\\Front\\src\\context\\VideoState.js",[],"E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\Game\\Grid.js",["134"],"// !------------------------------- IMPORTS -------------------------------- //\r\nimport React from \"react\";\r\nimport Button from \"./Button\";\r\nimport { Icon } from \"@iconify/react\"; // Cats icons (Copyright Concats)\r\n\r\nclass Grid extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      player1: \"X\", // Player 1\r\n      player2: \"O\", // Player 2\r\n      player1Turn: true, // Boolean to alternate between player 1 and Player 2\r\n\r\n      // Changing the display of our text in the render dynamically,\r\n      // according to the game scenarios :\r\n      display: \"none\",\r\n      displayP1Won: \"none\",\r\n      displayP2Won: \"none\",\r\n      displayDraw: \"none\",\r\n      displayRESTART: \"none\",\r\n      clickedBtns: [],\r\n      checkedBtnPlayer1: [], // Player 1's history of checked buttons\r\n      checkedBtnPlayer2: [], // Player 2's history of checked buttons\r\n      disabled: false,\r\n      winner: false, // Boolean to check if a player has won\r\n\r\n      // List of the winning combination lines :\r\n      winningLines: [\r\n        [\"0\", \"1\", \"2\"],\r\n        [\"3\", \"4\", \"5\"],\r\n        [\"6\", \"7\", \"8\"],\r\n        [\"0\", \"3\", \"6\"],\r\n        [\"1\", \"4\", \"7\"],\r\n        [\"2\", \"5\", \"8\"],\r\n        [\"0\", \"4\", \"8\"],\r\n        [\"2\", \"4\", \"6\"],\r\n      ],\r\n    };\r\n\r\n    // Bind functions\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.checkIfWinP1 = this.checkIfWinP1.bind(this);\r\n    this.checkIfWinP2 = this.checkIfWinP2.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n  }\r\n\r\n  // !------------------------------- FUNCTIONS -------------------------------- //\r\n\r\n  // Creating 2 functions that will create our users history of checked buttons (checkedBtnPlayer1 and checkedBtnPlayer2 arrays) and check if they contain any winning line at at every turn : the first user that has any of the winning lines wins and the game ends.\r\n\r\n  // Function to check if Player 2 has won :\r\n  checkIfWinP2() {\r\n    //Creating a map method that will iterate into the array of winning lines and check if any of them are inside the array of player 2's clicked buttons (checkedBtnPlayer2) : if so, the const containsAll return True, if not, it returns False :\r\n    this.state.winningLines.map((line) => {\r\n      const containsAll = line.every((elem) => {\r\n        return this.state.checkedBtnPlayer2.includes(elem);\r\n      });\r\n\r\n      //If the variable containsAll returns True, a winning notification get displayed in the page :\r\n      if (containsAll === true) {\r\n        this.setState({\r\n          displayP2Won: \"initial\",\r\n          displayRESTART: \"initial\",\r\n          displayDraw: \"none\",\r\n          winner: true,\r\n        });\r\n        //Creating a loop that will check every button : if it's part of the winning line, the background color turns into green :\r\n        for (let i = 0; i < line.length; i++) {\r\n          let id = line[i];\r\n          let allButtons = document.querySelectorAll(\"input\");\r\n\r\n          allButtons.forEach((button) => {\r\n            if (button.id === id) {\r\n              button.style.background = \"rgba(26, 175, 73, 0.5)\";\r\n            }\r\n          });\r\n        }\r\n        return console.log(\" Bravo ! Player 2 a gagné \", containsAll);\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n  // Function to check if Player 1 has won :\r\n  checkIfWinP1() {\r\n    //Creating a map method that will iterate into the array of winning lines and check if any of them are inside the array of player 1's clicked buttons (checkedBtnPlayer1) : if so, the const containsAll return True, if not, it returns False :\r\n    this.state.winningLines.map((line) => {\r\n      const containsAll = line.every((elem) => {\r\n        return this.state.checkedBtnPlayer1.includes(elem);\r\n      });\r\n      if (containsAll === true) {\r\n        this.setState({\r\n          displayP1Won: \"initial\",\r\n          displayRESTART: \"initial\",\r\n          displayDraw: \"none\",\r\n          winner: true,\r\n        });\r\n\r\n        //Creating a loop that will check every button : if it's part of the winning line, the background color turns into red :\r\n        for (let i = 0; i < line.length; i++) {\r\n          let id = line[i];\r\n          let allButtons = document.querySelectorAll(\"input\");\r\n\r\n          allButtons.forEach((button) => {\r\n            if (button.id === id) {\r\n              button.style.background = \"rgba(175, 26, 26, 0.4)\";\r\n            }\r\n          });\r\n        }\r\n\r\n        return console.log(\" Bravo ! Player 1 a gagné \", containsAll);\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  handleClick(e) {\r\n    // If the button's value is not empty, it means that the button is already clicked => the user can't select it and gets an error message :\r\n    if (e.target.value !== \"\") {\r\n      return this.setState(\r\n        {\r\n          display: \"initial\",\r\n        },\r\n        () => {\r\n          // Creating a setTimeOut method to remove the error message after 2 seconds :\r\n          setTimeout(() => {\r\n            this.setState({ display: \"none\" });\r\n          }, 1900);\r\n        }\r\n      );\r\n    }\r\n    // ---------------- PLAYER 2 ----------------- //\r\n\r\n    // Creating a condition to check whose turn it is (Player1's turn or Player2's turn): if the boolean Player1Turn is true, it means that the next move will be a \"X\" for Player 1. If Player1Turn is false, the next move will be a \"O\" for Player 2:\r\n\r\n    if (this.state.player1Turn === false) {\r\n      const copyArray2 = [...this.state.checkedBtnPlayer2, e.target.id];\r\n      this.setState(\r\n        {\r\n          player1Turn: true,\r\n        },\r\n        () => {\r\n          this.setState({ checkedBtnPlayer2: copyArray2 }, () => {\r\n            console.log(\"test Array player2: \", this.state.checkedBtnPlayer2);\r\n            e.target.value = this.state.player2;\r\n            e.target.className = \"styleO m-1 border\"; //style for O\r\n            this.checkIfWinP2();\r\n          });\r\n        }\r\n      );\r\n      // ---------------- PLAYER 1 ---------------- //\r\n    } else if (this.state.player1Turn === true) {\r\n      const copyArray1 = [...this.state.checkedBtnPlayer1, e.target.id];\r\n      this.setState(\r\n        {\r\n          player1Turn: false,\r\n        },\r\n        () => {\r\n          this.setState({ checkedBtnPlayer1: copyArray1 }, () => {\r\n            console.log(\"test Array player1: \", this.state.checkedBtnPlayer1);\r\n            e.target.value = this.state.player1;\r\n            e.target.className = \"styleX m-1 border\"; //style for X\r\n            this.checkIfWinP1();\r\n          });\r\n        }\r\n      );\r\n    }\r\n    const copyClickedBtns = this.state.clickedBtns; // Creating a copy of the clicked buttons's array\r\n    copyClickedBtns.push(e.target.id); // Adding the last clicked button to our copy array\r\n    this.setState({ clickedBtns: copyClickedBtns }); // Replacing our clicked buttons array with our updated copyArray\r\n\r\n    // Checking if the clicked buttons array is full (i.e, if it contains all of our buttons id) and if we do not have any winner : if so, we get a draw and the game is over. => a \"RESTART\" button is displayed\r\n\r\n    if (this.state.clickedBtns.length === 9 && this.state.winner === false) {\r\n      this.setState({ displayRESTART: \"initial\", displayDraw: \"initial\" });\r\n      console.log(\"match nul\");\r\n    }\r\n  }\r\n\r\n  // Checking if we have a winner : if so, the button are disabled so that the player cant keep playing.\r\n  componentDidUpdate(_prevProps, prevState) {\r\n    if (prevState.winner !== this.state.winner) {\r\n      if (this.state.winner === true) {\r\n        this.setState({ disabled: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Function that resets our buttons and elements at the end of a round  :\r\n  handleReset() {\r\n    this.setState({ disabled: false });\r\n    let clearbuttons = document.querySelectorAll(\"input\"); //we select every input\r\n\r\n    //If the inputs dont contain \"RESET\" nor \"RESTART\" we reset their value :\r\n    clearbuttons.forEach((button) => {\r\n      if (button.value !== \"RESET\" && button.value !== \"RESTART\") {\r\n        button.value = \"\";\r\n        button.style.background = \"transparent\";\r\n      }\r\n    });\r\n    this.setState({\r\n      checkedBtnPlayer1: [],\r\n      checkedBtnPlayer2: [],\r\n      clickedBtns: [],\r\n      player1Turn: true,\r\n      winner: false,\r\n    });\r\n    this.setState({\r\n      displayP2Won: \"none\",\r\n      displayP1Won: \"none\",\r\n      displayDraw: \"none\",\r\n      displayRESTART: \"none\",\r\n    });\r\n\r\n    console.log(\"RESET\");\r\n  }\r\n\r\n  // !------------------------------- RENDER -------------------------------- //\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"container-lg pt-4\">\r\n        {/* TITLE  */}\r\n        <h1 className=\"title text-center display-2\">\r\n          T<span className=\"span-title\">i</span>c T\r\n          <span className=\"span-title-red\">a</span>c{\" \"}\r\n          <span className=\"span-bg-black\"> Toe</span>\r\n        </h1>\r\n        <div className=\"row justify-content-center \">\r\n          <div className=\"col-lg-3 col-md-6  order-1 order-lg-1 rounded p-3 text-center m-2 d-flex flex-column justify-content-center align-items-center\">\r\n            {this.state.player1Turn ? (\r\n              <p>\r\n                Your turn <span className=\"red\">Player1</span> :{\" \"}\r\n                <span className=\"span-title-red \">X</span>\r\n              </p>\r\n            ) : (\r\n              <p>\r\n                Your turn <span className=\"green\">Player2</span> :{\" \"}\r\n                <span className=\"span-title\">O</span>\r\n              </p>\r\n            )}\r\n            <input\r\n              className={`btn btn-dark m-1 col-lg-7 col-md-6 col-sm-6 col-6`}\r\n              type=\"reset\"\r\n              value=\"RESET\"\r\n              onClick={this.handleReset}\r\n            />\r\n          </div>\r\n          {/* Div containing our Button components */}\r\n          <div className=\"col-lg-5 col-md-6  order-3 order-lg-3 rounded p-3 m-2  d-flex flex-column  justify-content-center align-items-center\">\r\n            <div style={{ display: \"flex\" }}>\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"0\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"1\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"2\"\r\n                disabled={this.state.disabled}\r\n              />\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\" }}>\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"3\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"4\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"5\"\r\n                disabled={this.state.disabled}\r\n              />\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\" }}>\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"6\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"7\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"8\"\r\n                disabled={this.state.disabled}\r\n              />\r\n            </div>\r\n          </div>\r\n          {/* Div containing are end of game messages */}\r\n          <div className=\"col-lg-3 col-md-6 order-3 order-lg-3 rounded p-3 m-2 d-flex flex-column justify-content-center align-items-center\">\r\n            <p style={{ display: this.state.displayP2Won }}>Player 2 won !!</p>\r\n            <p style={{ display: this.state.displayP1Won }}>Player 1 won !!</p>\r\n            <p style={{ display: this.state.displayDraw }}>\r\n              It's a draw... Play again?\r\n            </p>\r\n            <input\r\n              className={`btn m-1 col-lg-7 col-md-6 col-sm-6 col-6 btn-danger`}\r\n              style={{ display: this.state.displayRESTART }}\r\n              type=\"button\"\r\n              value=\"RESTART\"\r\n              onClick={this.handleReset}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row div-warning\">\r\n          <p\r\n            className=\"warning align-center\"\r\n            style={{ display: this.state.display }}\r\n          >\r\n            Box already ticked ! Please, select another one.\r\n          </p>\r\n        </div>\r\n\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\menu\\nav.component.js",[],"E:\\AndroidProjects\\RommieSpace\\Front\\src\\context\\VideoContext.js",["135"],"import React, { createContext } from \"react\";\r\nconst VideoContext = createContext();\r\nexport default VideoContext;\r\n","E:\\AndroidProjects\\RommieSpace\\Front\\src\\components\\Game\\Button.js",[],{"ruleId":"136","severity":1,"message":"137","line":10,"column":8,"nodeType":"138","messageId":"139","endLine":10,"endColumn":12},{"ruleId":"136","severity":1,"message":"140","line":6,"column":8,"nodeType":"138","messageId":"139","endLine":6,"endColumn":15},{"ruleId":"136","severity":1,"message":"141","line":7,"column":8,"nodeType":"138","messageId":"139","endLine":7,"endColumn":14},{"ruleId":"142","severity":1,"message":"143","line":18,"column":6,"nodeType":"144","endLine":18,"endColumn":17,"suggestions":"145"},{"ruleId":"136","severity":1,"message":"146","line":3,"column":8,"nodeType":"138","messageId":"139","endLine":3,"endColumn":12},{"ruleId":"136","severity":1,"message":"140","line":7,"column":8,"nodeType":"138","messageId":"139","endLine":7,"endColumn":15},{"ruleId":"136","severity":1,"message":"147","line":9,"column":8,"nodeType":"138","messageId":"139","endLine":9,"endColumn":13},{"ruleId":"136","severity":1,"message":"148","line":12,"column":8,"nodeType":"138","messageId":"139","endLine":12,"endColumn":14},{"ruleId":"136","severity":1,"message":"149","line":16,"column":8,"nodeType":"138","messageId":"139","endLine":16,"endColumn":13},{"ruleId":"136","severity":1,"message":"150","line":19,"column":5,"nodeType":"138","messageId":"139","endLine":19,"endColumn":16},{"ruleId":"136","severity":1,"message":"151","line":6,"column":8,"nodeType":"138","messageId":"139","endLine":6,"endColumn":11},{"ruleId":"136","severity":1,"message":"152","line":7,"column":8,"nodeType":"138","messageId":"139","endLine":7,"endColumn":11},{"ruleId":"136","severity":1,"message":"153","line":10,"column":16,"nodeType":"138","messageId":"139","endLine":10,"endColumn":25},{"ruleId":"136","severity":1,"message":"151","line":5,"column":8,"nodeType":"138","messageId":"139","endLine":5,"endColumn":11},{"ruleId":"136","severity":1,"message":"152","line":6,"column":8,"nodeType":"138","messageId":"139","endLine":6,"endColumn":11},{"ruleId":"136","severity":1,"message":"154","line":8,"column":16,"nodeType":"138","messageId":"139","endLine":8,"endColumn":24},{"ruleId":"136","severity":1,"message":"153","line":9,"column":16,"nodeType":"138","messageId":"139","endLine":9,"endColumn":25},{"ruleId":"155","severity":1,"message":"156","line":46,"column":70,"nodeType":"157","messageId":"158","endLine":46,"endColumn":71,"fix":"159"},{"ruleId":"136","severity":1,"message":"160","line":2,"column":25,"nodeType":"138","messageId":"139","endLine":2,"endColumn":32},{"ruleId":"136","severity":1,"message":"161","line":2,"column":34,"nodeType":"138","messageId":"139","endLine":2,"endColumn":39},{"ruleId":"136","severity":1,"message":"162","line":3,"column":8,"nodeType":"138","messageId":"139","endLine":3,"endColumn":13},{"ruleId":"136","severity":1,"message":"163","line":4,"column":8,"nodeType":"138","messageId":"139","endLine":4,"endColumn":13},{"ruleId":"136","severity":1,"message":"164","line":8,"column":8,"nodeType":"138","messageId":"139","endLine":8,"endColumn":12},{"ruleId":"136","severity":1,"message":"165","line":20,"column":3,"nodeType":"138","messageId":"139","endLine":20,"endColumn":21},{"ruleId":"136","severity":1,"message":"166","line":21,"column":3,"nodeType":"138","messageId":"139","endLine":21,"endColumn":16},{"ruleId":"136","severity":1,"message":"167","line":23,"column":10,"nodeType":"138","messageId":"139","endLine":23,"endColumn":16},{"ruleId":"136","severity":1,"message":"168","line":26,"column":10,"nodeType":"138","messageId":"139","endLine":26,"endColumn":18},{"ruleId":"136","severity":1,"message":"169","line":26,"column":20,"nodeType":"138","messageId":"139","endLine":26,"endColumn":31},{"ruleId":"136","severity":1,"message":"170","line":33,"column":5,"nodeType":"138","messageId":"139","endLine":33,"endColumn":12},{"ruleId":"136","severity":1,"message":"171","line":34,"column":5,"nodeType":"138","messageId":"139","endLine":34,"endColumn":14},{"ruleId":"136","severity":1,"message":"172","line":35,"column":5,"nodeType":"138","messageId":"139","endLine":35,"endColumn":11},{"ruleId":"136","severity":1,"message":"173","line":38,"column":5,"nodeType":"138","messageId":"139","endLine":38,"endColumn":14},{"ruleId":"136","severity":1,"message":"174","line":40,"column":5,"nodeType":"138","messageId":"139","endLine":40,"endColumn":13},{"ruleId":"136","severity":1,"message":"175","line":41,"column":5,"nodeType":"138","messageId":"139","endLine":41,"endColumn":14},{"ruleId":"136","severity":1,"message":"176","line":42,"column":5,"nodeType":"138","messageId":"139","endLine":42,"endColumn":15},{"ruleId":"136","severity":1,"message":"177","line":43,"column":5,"nodeType":"138","messageId":"139","endLine":43,"endColumn":14},{"ruleId":"136","severity":1,"message":"178","line":54,"column":9,"nodeType":"138","messageId":"139","endLine":54,"endColumn":18},{"ruleId":"136","severity":1,"message":"179","line":58,"column":9,"nodeType":"138","messageId":"139","endLine":58,"endColumn":21},{"ruleId":"142","severity":1,"message":"180","line":68,"column":6,"nodeType":"144","endLine":68,"endColumn":28,"suggestions":"181"},{"ruleId":"136","severity":1,"message":"182","line":4,"column":10,"nodeType":"138","messageId":"139","endLine":4,"endColumn":14},{"ruleId":"136","severity":1,"message":"148","line":4,"column":23,"nodeType":"138","messageId":"139","endLine":4,"endColumn":29},{"ruleId":"136","severity":1,"message":"183","line":5,"column":8,"nodeType":"138","messageId":"139","endLine":5,"endColumn":11},{"ruleId":"136","severity":1,"message":"184","line":7,"column":10,"nodeType":"138","messageId":"139","endLine":7,"endColumn":12},{"ruleId":"136","severity":1,"message":"185","line":13,"column":10,"nodeType":"138","messageId":"139","endLine":13,"endColumn":22},{"ruleId":"136","severity":1,"message":"186","line":32,"column":5,"nodeType":"138","messageId":"139","endLine":32,"endColumn":12},{"ruleId":"136","severity":1,"message":"187","line":34,"column":5,"nodeType":"138","messageId":"139","endLine":34,"endColumn":7},{"ruleId":"136","severity":1,"message":"174","line":35,"column":5,"nodeType":"138","messageId":"139","endLine":35,"endColumn":13},{"ruleId":"136","severity":1,"message":"175","line":36,"column":5,"nodeType":"138","messageId":"139","endLine":36,"endColumn":14},{"ruleId":"136","severity":1,"message":"176","line":37,"column":5,"nodeType":"138","messageId":"139","endLine":37,"endColumn":15},{"ruleId":"136","severity":1,"message":"188","line":44,"column":5,"nodeType":"138","messageId":"139","endLine":44,"endColumn":16},{"ruleId":"142","severity":1,"message":"189","line":88,"column":6,"nodeType":"144","endLine":88,"endColumn":14,"suggestions":"190"},{"ruleId":"136","severity":1,"message":"191","line":4,"column":10,"nodeType":"138","messageId":"139","endLine":4,"endColumn":14},{"ruleId":"136","severity":1,"message":"192","line":1,"column":8,"nodeType":"138","messageId":"139","endLine":1,"endColumn":13},"no-unused-vars","'Game' is defined but never used.","Identifier","unusedVar","'Options' is defined but never used.","'Footer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'navigator'. Either exclude it or remove the dependency array. Outer scope values like 'navigator' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["193"],"'Form' is defined but never used.","'Video' is defined but never used.","'Button' is defined but never used.","'axios' is defined but never used.","'useNavigate' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'FormGroup' is defined but never used.","'Navigate' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"194","text":"195"},"'Tooltip' is defined but never used.","'Modal' is defined but never used.","'Phone' is defined but never used.","'Teams' is defined but never used.","'Hang' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'PhoneOutlined' is defined but never used.","'socket' is defined but never used.","'idToCall' is assigned a value but never used.","'setIdToCall' is assigned a value but never used.","'myVideo' is assigned a value but never used.","'userVideo' is assigned a value but never used.","'stream' is assigned a value but never used.","'callEnded' is assigned a value but never used.","'callUser' is assigned a value but never used.","'leaveCall' is assigned a value but never used.","'answerCall' is assigned a value but never used.","'otherUser' is assigned a value but never used.","'showModal' is assigned a value but never used.","'handleCancel' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'call.from', 'callAccepted', and 'setOtherUser'. Either include them or remove the dependency array.",["196"],"'Card' is defined but never used.","'Man' is defined but never used.","'io' is defined but never used.","'UserOutlined' is defined but never used.","'setName' is assigned a value but never used.","'me' is assigned a value but never used.","'screenShare' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isModalVisible'. Either include it or remove the dependency array.",["197"],"'Icon' is defined but never used.","'React' is defined but never used.",{"desc":"198","fix":"199"},[1119,1134],"\r\n            .",{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},"Update the dependencies array to be: []",{"range":"204","text":"205"},"Update the dependencies array to be: [call.from, call.isReceivingCall, callAccepted, setOtherUser]",{"range":"206","text":"207"},"Update the dependencies array to be: [isModalVisible, msgRcv]",{"range":"208","text":"209"},[555,566],"[]",[1714,1736],"[call.from, call.isReceivingCall, callAccepted, setOtherUser]",[2314,2322],"[isModalVisible, msgRcv]"]