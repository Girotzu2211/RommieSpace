{"ast":null,"code":"var _jsxFileName = \"E:\\\\AndroidProjects\\\\RommieSpace\\\\Front\\\\src\\\\components\\\\Game\\\\Grid.js\";\n// !------------------------------- IMPORTS -------------------------------- //\nimport React from \"react\";\nimport Button from \"./Button\";\nimport { Icon } from \"@iconify/react\"; // Cats icons (Copyright Concats)\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Grid extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      player1: \"X\",\n      // Player 1\n      player2: \"O\",\n      // Player 2\n      player1Turn: true,\n      // Boolean to alternate between player 1 and Player 2\n      // Changing the display of our text in the render dynamically,\n      // according to the game scenarios :\n      display: \"none\",\n      displayP1Won: \"none\",\n      displayP2Won: \"none\",\n      displayDraw: \"none\",\n      displayRESTART: \"none\",\n      clickedBtns: [],\n      checkedBtnPlayer1: [],\n      // Player 1's history of checked buttons\n      checkedBtnPlayer2: [],\n      // Player 2's history of checked buttons\n      disabled: false,\n      winner: false,\n      // Boolean to check if a player has won\n      // List of the winning combination lines :\n      winningLines: [[\"0\", \"1\", \"2\"], [\"3\", \"4\", \"5\"], [\"6\", \"7\", \"8\"], [\"0\", \"3\", \"6\"], [\"1\", \"4\", \"7\"], [\"2\", \"5\", \"8\"], [\"0\", \"4\", \"8\"], [\"2\", \"4\", \"6\"]]\n    }; // Bind functions\n\n    this.handleClick = this.handleClick.bind(this);\n    this.checkIfWinP1 = this.checkIfWinP1.bind(this);\n    this.checkIfWinP2 = this.checkIfWinP2.bind(this);\n    this.handleReset = this.handleReset.bind(this);\n  } // !------------------------------- FUNCTIONS -------------------------------- //\n  // Creating 2 functions that will create our users history of checked buttons (checkedBtnPlayer1 and checkedBtnPlayer2 arrays) and check if they contain any winning line at at every turn : the first user that has any of the winning lines wins and the game ends.\n  // Function to check if Player 2 has won :\n\n\n  checkIfWinP2() {\n    //Creating a map method that will iterate into the array of winning lines and check if any of them are inside the array of player 2's clicked buttons (checkedBtnPlayer2) : if so, the const containsAll return True, if not, it returns False :\n    this.state.winningLines.map(line => {\n      const containsAll = line.every(elem => {\n        return this.state.checkedBtnPlayer2.includes(elem);\n      }); //If the variable containsAll returns True, a winning notification get displayed in the page :\n\n      if (containsAll === true) {\n        this.setState({\n          displayP2Won: \"initial\",\n          displayRESTART: \"initial\",\n          displayDraw: \"none\",\n          winner: true\n        }); //Creating a loop that will check every button : if it's part of the winning line, the background color turns into green :\n\n        for (let i = 0; i < line.length; i++) {\n          let id = line[i];\n          let allButtons = document.querySelectorAll(\"input\");\n          allButtons.forEach(button => {\n            if (button.id === id) {\n              button.style.background = \"rgba(26, 175, 73, 0.5)\";\n            }\n          });\n        }\n\n        return console.log(\" Bravo ! Player 2 a gagné \", containsAll);\n      }\n\n      return null;\n    });\n  } // Function to check if Player 1 has won :\n\n\n  checkIfWinP1() {\n    //Creating a map method that will iterate into the array of winning lines and check if any of them are inside the array of player 1's clicked buttons (checkedBtnPlayer1) : if so, the const containsAll return True, if not, it returns False :\n    this.state.winningLines.map(line => {\n      const containsAll = line.every(elem => {\n        return this.state.checkedBtnPlayer1.includes(elem);\n      });\n\n      if (containsAll === true) {\n        this.setState({\n          displayP1Won: \"initial\",\n          displayRESTART: \"initial\",\n          displayDraw: \"none\",\n          winner: true\n        }); //Creating a loop that will check every button : if it's part of the winning line, the background color turns into red :\n\n        for (let i = 0; i < line.length; i++) {\n          let id = line[i];\n          let allButtons = document.querySelectorAll(\"input\");\n          allButtons.forEach(button => {\n            if (button.id === id) {\n              button.style.background = \"rgba(175, 26, 26, 0.4)\";\n            }\n          });\n        }\n\n        return console.log(\" Bravo ! Player 1 a gagné \", containsAll);\n      }\n\n      return null;\n    });\n  }\n\n  handleClick(e) {\n    // If the button's value is not empty, it means that the button is already clicked => the user can't select it and gets an error message :\n    if (e.target.value !== \"\") {\n      return this.setState({\n        display: \"initial\"\n      }, () => {\n        // Creating a setTimeOut method to remove the error message after 2 seconds :\n        setTimeout(() => {\n          this.setState({\n            display: \"none\"\n          });\n        }, 1900);\n      });\n    } // ---------------- PLAYER 2 ----------------- //\n    // Creating a condition to check whose turn it is (Player1's turn or Player2's turn): if the boolean Player1Turn is true, it means that the next move will be a \"X\" for Player 1. If Player1Turn is false, the next move will be a \"O\" for Player 2:\n\n\n    if (this.state.player1Turn === false) {\n      const copyArray2 = [...this.state.checkedBtnPlayer2, e.target.id];\n      this.setState({\n        player1Turn: true\n      }, () => {\n        this.setState({\n          checkedBtnPlayer2: copyArray2\n        }, () => {\n          console.log(\"test Array player2: \", this.state.checkedBtnPlayer2);\n          e.target.value = this.state.player2;\n          e.target.className = \"styleO m-1 border\"; //style for O\n\n          this.checkIfWinP2();\n        });\n      }); // ---------------- PLAYER 1 ---------------- //\n    } else if (this.state.player1Turn === true) {\n      const copyArray1 = [...this.state.checkedBtnPlayer1, e.target.id];\n      this.setState({\n        player1Turn: false\n      }, () => {\n        this.setState({\n          checkedBtnPlayer1: copyArray1\n        }, () => {\n          console.log(\"test Array player1: \", this.state.checkedBtnPlayer1);\n          e.target.value = this.state.player1;\n          e.target.className = \"styleX m-1 border\"; //style for X\n\n          this.checkIfWinP1();\n        });\n      });\n    }\n\n    const copyClickedBtns = this.state.clickedBtns; // Creating a copy of the clicked buttons's array\n\n    copyClickedBtns.push(e.target.id); // Adding the last clicked button to our copy array\n\n    this.setState({\n      clickedBtns: copyClickedBtns\n    }); // Replacing our clicked buttons array with our updated copyArray\n    // Checking if the clicked buttons array is full (i.e, if it contains all of our buttons id) and if we do not have any winner : if so, we get a draw and the game is over. => a \"RESTART\" button is displayed\n\n    if (this.state.clickedBtns.length === 9 && this.state.winner === false) {\n      this.setState({\n        displayRESTART: \"initial\",\n        displayDraw: \"initial\"\n      });\n      console.log(\"match nul\");\n    }\n  } // Checking if we have a winner : if so, the button are disabled so that the player cant keep playing.\n\n\n  componentDidUpdate(_prevProps, prevState) {\n    if (prevState.winner !== this.state.winner) {\n      if (this.state.winner === true) {\n        this.setState({\n          disabled: true\n        });\n      }\n    }\n  } // Function that resets our buttons and elements at the end of a round  :\n\n\n  handleReset() {\n    this.setState({\n      disabled: false\n    });\n    let clearbuttons = document.querySelectorAll(\"input\"); //we select every input\n    //If the inputs dont contain \"RESET\" nor \"RESTART\" we reset their value :\n\n    clearbuttons.forEach(button => {\n      if (button.value !== \"RESET\" && button.value !== \"RESTART\") {\n        button.value = \"\";\n        button.style.background = \"transparent\";\n      }\n    });\n    this.setState({\n      checkedBtnPlayer1: [],\n      checkedBtnPlayer2: [],\n      clickedBtns: [],\n      player1Turn: true,\n      winner: false\n    });\n    this.setState({\n      displayP2Won: \"none\",\n      displayP1Won: \"none\",\n      displayDraw: \"none\",\n      displayRESTART: \"none\"\n    });\n    console.log(\"RESET\");\n  } // !------------------------------- RENDER -------------------------------- //\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"container-lg pt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title text-center display-2\",\n        children: [\"T\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"span-title\",\n          children: \"i\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 12\n        }, this), \"c T\", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"span-title-red\",\n          children: \"a\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this), \"c\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"span-bg-black\",\n          children: \" Toe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row justify-content-center \",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-3 col-md-6  order-1 order-lg-1 rounded p-3 text-center m-2 d-flex flex-column justify-content-center align-items-center\",\n          children: [this.state.player1Turn ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Your turn \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"red\",\n              children: \"Player1\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 27\n            }, this), \" :\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"span-title-red \",\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Your turn \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"green\",\n              children: \"Player2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 27\n            }, this), \" :\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"span-title\",\n              children: \"O\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: `btn btn-dark m-1 col-lg-7 col-md-6 col-sm-6 col-6`,\n            type: \"reset\",\n            value: \"RESET\",\n            onClick: this.handleReset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-5 col-md-6  order-3 order-lg-3 rounded p-3 m-2  d-flex flex-column  justify-content-center align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onclick: this.handleClick,\n              id: \"0\",\n              disabled: this.state.disabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onclick: this.handleClick,\n              id: \"1\",\n              disabled: this.state.disabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 256,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onclick: this.handleClick,\n              id: \"2\",\n              disabled: this.state.disabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onclick: this.handleClick,\n              id: \"3\",\n              disabled: this.state.disabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onclick: this.handleClick,\n              id: \"4\",\n              disabled: this.state.disabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onclick: this.handleClick,\n              id: \"5\",\n              disabled: this.state.disabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onclick: this.handleClick,\n              id: \"6\",\n              disabled: this.state.disabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onclick: this.handleClick,\n              id: \"7\",\n              disabled: this.state.disabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onclick: this.handleClick,\n              id: \"8\",\n              disabled: this.state.disabled\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-lg-3 col-md-6 order-3 order-lg-3 rounded p-3 m-2 d-flex flex-column justify-content-center align-items-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              display: this.state.displayP2Won\n            },\n            children: \"Player 2 won !!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              display: this.state.displayP1Won\n            },\n            children: \"Player 1 won !!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              display: this.state.displayDraw\n            },\n            children: \"It's a draw... Play again?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            className: `btn m-1 col-lg-7 col-md-6 col-sm-6 col-6 btn-danger`,\n            style: {\n              display: this.state.displayRESTART\n            },\n            type: \"button\",\n            value: \"RESTART\",\n            onClick: this.handleReset\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row div-warning\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"warning align-center\",\n          style: {\n            display: this.state.display\n          },\n          children: \"Box already ticked ! Please, select another one.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Grid;","map":{"version":3,"sources":["E:/AndroidProjects/RommieSpace/Front/src/components/Game/Grid.js"],"names":["React","Button","Icon","Grid","Component","constructor","state","player1","player2","player1Turn","display","displayP1Won","displayP2Won","displayDraw","displayRESTART","clickedBtns","checkedBtnPlayer1","checkedBtnPlayer2","disabled","winner","winningLines","handleClick","bind","checkIfWinP1","checkIfWinP2","handleReset","map","line","containsAll","every","elem","includes","setState","i","length","id","allButtons","document","querySelectorAll","forEach","button","style","background","console","log","e","target","value","setTimeout","copyArray2","className","copyArray1","copyClickedBtns","push","componentDidUpdate","_prevProps","prevState","clearbuttons","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,IAAT,QAAqB,gBAArB,C,CAAuC;;;;AAEvC,MAAMC,IAAN,SAAmBH,KAAK,CAACI,SAAzB,CAAmC;AACjCC,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,OAAO,EAAE,GADE;AACG;AACdC,MAAAA,OAAO,EAAE,GAFE;AAEG;AACdC,MAAAA,WAAW,EAAE,IAHF;AAGQ;AAEnB;AACA;AACAC,MAAAA,OAAO,EAAE,MAPE;AAQXC,MAAAA,YAAY,EAAE,MARH;AASXC,MAAAA,YAAY,EAAE,MATH;AAUXC,MAAAA,WAAW,EAAE,MAVF;AAWXC,MAAAA,cAAc,EAAE,MAXL;AAYXC,MAAAA,WAAW,EAAE,EAZF;AAaXC,MAAAA,iBAAiB,EAAE,EAbR;AAaY;AACvBC,MAAAA,iBAAiB,EAAE,EAdR;AAcY;AACvBC,MAAAA,QAAQ,EAAE,KAfC;AAgBXC,MAAAA,MAAM,EAAE,KAhBG;AAgBI;AAEf;AACAC,MAAAA,YAAY,EAAE,CACZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADY,EAEZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAFY,EAGZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHY,EAIZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAJY,EAKZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CALY,EAMZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CANY,EAOZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAPY,EAQZ,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CARY;AAnBH,KAAb,CAFY,CAiCZ;;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKG,WAAL,GAAmB,KAAKA,WAAL,CAAiBH,IAAjB,CAAsB,IAAtB,CAAnB;AACD,GAvCgC,CAyCjC;AAEA;AAEA;;;AACAE,EAAAA,YAAY,GAAG;AACb;AACA,SAAKlB,KAAL,CAAWc,YAAX,CAAwBM,GAAxB,CAA6BC,IAAD,IAAU;AACpC,YAAMC,WAAW,GAAGD,IAAI,CAACE,KAAL,CAAYC,IAAD,IAAU;AACvC,eAAO,KAAKxB,KAAL,CAAWW,iBAAX,CAA6Bc,QAA7B,CAAsCD,IAAtC,CAAP;AACD,OAFmB,CAApB,CADoC,CAKpC;;AACA,UAAIF,WAAW,KAAK,IAApB,EAA0B;AACxB,aAAKI,QAAL,CAAc;AACZpB,UAAAA,YAAY,EAAE,SADF;AAEZE,UAAAA,cAAc,EAAE,SAFJ;AAGZD,UAAAA,WAAW,EAAE,MAHD;AAIZM,UAAAA,MAAM,EAAE;AAJI,SAAd,EADwB,CAOxB;;AACA,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,cAAIE,EAAE,GAAGR,IAAI,CAACM,CAAD,CAAb;AACA,cAAIG,UAAU,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAjB;AAEAF,UAAAA,UAAU,CAACG,OAAX,CAAoBC,MAAD,IAAY;AAC7B,gBAAIA,MAAM,CAACL,EAAP,KAAcA,EAAlB,EAAsB;AACpBK,cAAAA,MAAM,CAACC,KAAP,CAAaC,UAAb,GAA0B,wBAA1B;AACD;AACF,WAJD;AAKD;;AACD,eAAOC,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0ChB,WAA1C,CAAP;AACD;;AACD,aAAO,IAAP;AACD,KA3BD;AA4BD,GA5EgC,CA6EjC;;;AACAL,EAAAA,YAAY,GAAG;AACb;AACA,SAAKjB,KAAL,CAAWc,YAAX,CAAwBM,GAAxB,CAA6BC,IAAD,IAAU;AACpC,YAAMC,WAAW,GAAGD,IAAI,CAACE,KAAL,CAAYC,IAAD,IAAU;AACvC,eAAO,KAAKxB,KAAL,CAAWU,iBAAX,CAA6Be,QAA7B,CAAsCD,IAAtC,CAAP;AACD,OAFmB,CAApB;;AAGA,UAAIF,WAAW,KAAK,IAApB,EAA0B;AACxB,aAAKI,QAAL,CAAc;AACZrB,UAAAA,YAAY,EAAE,SADF;AAEZG,UAAAA,cAAc,EAAE,SAFJ;AAGZD,UAAAA,WAAW,EAAE,MAHD;AAIZM,UAAAA,MAAM,EAAE;AAJI,SAAd,EADwB,CAQxB;;AACA,aAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,cAAIE,EAAE,GAAGR,IAAI,CAACM,CAAD,CAAb;AACA,cAAIG,UAAU,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAjB;AAEAF,UAAAA,UAAU,CAACG,OAAX,CAAoBC,MAAD,IAAY;AAC7B,gBAAIA,MAAM,CAACL,EAAP,KAAcA,EAAlB,EAAsB;AACpBK,cAAAA,MAAM,CAACC,KAAP,CAAaC,UAAb,GAA0B,wBAA1B;AACD;AACF,WAJD;AAKD;;AAED,eAAOC,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0ChB,WAA1C,CAAP;AACD;;AACD,aAAO,IAAP;AACD,KA3BD;AA4BD;;AAEDP,EAAAA,WAAW,CAACwB,CAAD,EAAI;AACb;AACA,QAAIA,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,EAAvB,EAA2B;AACzB,aAAO,KAAKf,QAAL,CACL;AACEtB,QAAAA,OAAO,EAAE;AADX,OADK,EAIL,MAAM;AACJ;AACAsC,QAAAA,UAAU,CAAC,MAAM;AACf,eAAKhB,QAAL,CAAc;AAAEtB,YAAAA,OAAO,EAAE;AAAX,WAAd;AACD,SAFS,EAEP,IAFO,CAAV;AAGD,OATI,CAAP;AAWD,KAdY,CAeb;AAEA;;;AAEA,QAAI,KAAKJ,KAAL,CAAWG,WAAX,KAA2B,KAA/B,EAAsC;AACpC,YAAMwC,UAAU,GAAG,CAAC,GAAG,KAAK3C,KAAL,CAAWW,iBAAf,EAAkC4B,CAAC,CAACC,MAAF,CAASX,EAA3C,CAAnB;AACA,WAAKH,QAAL,CACE;AACEvB,QAAAA,WAAW,EAAE;AADf,OADF,EAIE,MAAM;AACJ,aAAKuB,QAAL,CAAc;AAAEf,UAAAA,iBAAiB,EAAEgC;AAArB,SAAd,EAAiD,MAAM;AACrDN,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,KAAKtC,KAAL,CAAWW,iBAA/C;AACA4B,UAAAA,CAAC,CAACC,MAAF,CAASC,KAAT,GAAiB,KAAKzC,KAAL,CAAWE,OAA5B;AACAqC,UAAAA,CAAC,CAACC,MAAF,CAASI,SAAT,GAAqB,mBAArB,CAHqD,CAGX;;AAC1C,eAAK1B,YAAL;AACD,SALD;AAMD,OAXH,EAFoC,CAepC;AACD,KAhBD,MAgBO,IAAI,KAAKlB,KAAL,CAAWG,WAAX,KAA2B,IAA/B,EAAqC;AAC1C,YAAM0C,UAAU,GAAG,CAAC,GAAG,KAAK7C,KAAL,CAAWU,iBAAf,EAAkC6B,CAAC,CAACC,MAAF,CAASX,EAA3C,CAAnB;AACA,WAAKH,QAAL,CACE;AACEvB,QAAAA,WAAW,EAAE;AADf,OADF,EAIE,MAAM;AACJ,aAAKuB,QAAL,CAAc;AAAEhB,UAAAA,iBAAiB,EAAEmC;AAArB,SAAd,EAAiD,MAAM;AACrDR,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,KAAKtC,KAAL,CAAWU,iBAA/C;AACA6B,UAAAA,CAAC,CAACC,MAAF,CAASC,KAAT,GAAiB,KAAKzC,KAAL,CAAWC,OAA5B;AACAsC,UAAAA,CAAC,CAACC,MAAF,CAASI,SAAT,GAAqB,mBAArB,CAHqD,CAGX;;AAC1C,eAAK3B,YAAL;AACD,SALD;AAMD,OAXH;AAaD;;AACD,UAAM6B,eAAe,GAAG,KAAK9C,KAAL,CAAWS,WAAnC,CAnDa,CAmDmC;;AAChDqC,IAAAA,eAAe,CAACC,IAAhB,CAAqBR,CAAC,CAACC,MAAF,CAASX,EAA9B,EApDa,CAoDsB;;AACnC,SAAKH,QAAL,CAAc;AAAEjB,MAAAA,WAAW,EAAEqC;AAAf,KAAd,EArDa,CAqDoC;AAEjD;;AAEA,QAAI,KAAK9C,KAAL,CAAWS,WAAX,CAAuBmB,MAAvB,KAAkC,CAAlC,IAAuC,KAAK5B,KAAL,CAAWa,MAAX,KAAsB,KAAjE,EAAwE;AACtE,WAAKa,QAAL,CAAc;AAAElB,QAAAA,cAAc,EAAE,SAAlB;AAA6BD,QAAAA,WAAW,EAAE;AAA1C,OAAd;AACA8B,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACD;AACF,GA3KgC,CA6KjC;;;AACAU,EAAAA,kBAAkB,CAACC,UAAD,EAAaC,SAAb,EAAwB;AACxC,QAAIA,SAAS,CAACrC,MAAV,KAAqB,KAAKb,KAAL,CAAWa,MAApC,EAA4C;AAC1C,UAAI,KAAKb,KAAL,CAAWa,MAAX,KAAsB,IAA1B,EAAgC;AAC9B,aAAKa,QAAL,CAAc;AAAEd,UAAAA,QAAQ,EAAE;AAAZ,SAAd;AACD;AACF;AACF,GApLgC,CAsLjC;;;AACAO,EAAAA,WAAW,GAAG;AACZ,SAAKO,QAAL,CAAc;AAAEd,MAAAA,QAAQ,EAAE;AAAZ,KAAd;AACA,QAAIuC,YAAY,GAAGpB,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAnB,CAFY,CAE2C;AAEvD;;AACAmB,IAAAA,YAAY,CAAClB,OAAb,CAAsBC,MAAD,IAAY;AAC/B,UAAIA,MAAM,CAACO,KAAP,KAAiB,OAAjB,IAA4BP,MAAM,CAACO,KAAP,KAAiB,SAAjD,EAA4D;AAC1DP,QAAAA,MAAM,CAACO,KAAP,GAAe,EAAf;AACAP,QAAAA,MAAM,CAACC,KAAP,CAAaC,UAAb,GAA0B,aAA1B;AACD;AACF,KALD;AAMA,SAAKV,QAAL,CAAc;AACZhB,MAAAA,iBAAiB,EAAE,EADP;AAEZC,MAAAA,iBAAiB,EAAE,EAFP;AAGZF,MAAAA,WAAW,EAAE,EAHD;AAIZN,MAAAA,WAAW,EAAE,IAJD;AAKZU,MAAAA,MAAM,EAAE;AALI,KAAd;AAOA,SAAKa,QAAL,CAAc;AACZpB,MAAAA,YAAY,EAAE,MADF;AAEZD,MAAAA,YAAY,EAAE,MAFF;AAGZE,MAAAA,WAAW,EAAE,MAHD;AAIZC,MAAAA,cAAc,EAAE;AAJJ,KAAd;AAOA6B,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,GAjNgC,CAmNjC;;;AAEAc,EAAAA,MAAM,GAAG;AACP,wBACE;AAAS,MAAA,SAAS,EAAC,mBAAnB;AAAA,8BAEE;AAAI,QAAA,SAAS,EAAC,6BAAd;AAAA,qCACG;AAAM,UAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH,sBAEE;AAAM,UAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,OAE6C,GAF7C,eAGE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAOE;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,gIAAf;AAAA,qBACG,KAAKpD,KAAL,CAAWG,WAAX,gBACC;AAAA,kDACY;AAAM,cAAA,SAAS,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADZ,QACmD,GADnD,eAEE;AAAM,cAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,gBAMC;AAAA,kDACY;AAAM,cAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADZ,QACqD,GADrD,eAEE;AAAM,cAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPJ,eAYE;AACE,YAAA,SAAS,EAAG,mDADd;AAEE,YAAA,IAAI,EAAC,OAFP;AAGE,YAAA,KAAK,EAAC,OAHR;AAIE,YAAA,OAAO,EAAE,KAAKgB;AAJhB;AAAA;AAAA;AAAA;AAAA,kBAZF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAqBE;AAAK,UAAA,SAAS,EAAC,sHAAf;AAAA,kCACE;AAAK,YAAA,KAAK,EAAE;AAAEf,cAAAA,OAAO,EAAE;AAAX,aAAZ;AAAA,oCACE,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,KAAKW,WADhB;AAEE,cAAA,EAAE,EAAC,GAFL;AAGE,cAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWY;AAHvB;AAAA;AAAA;AAAA;AAAA,oBADF,eAME,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,KAAKG,WADhB;AAEE,cAAA,EAAE,EAAC,GAFL;AAGE,cAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWY;AAHvB;AAAA;AAAA;AAAA;AAAA,oBANF,eAWE,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,KAAKG,WADhB;AAEE,cAAA,EAAE,EAAC,GAFL;AAGE,cAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWY;AAHvB;AAAA;AAAA;AAAA;AAAA,oBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAmBE;AAAK,YAAA,KAAK,EAAE;AAAER,cAAAA,OAAO,EAAE;AAAX,aAAZ;AAAA,oCACE,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,KAAKW,WADhB;AAEE,cAAA,EAAE,EAAC,GAFL;AAGE,cAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWY;AAHvB;AAAA;AAAA;AAAA;AAAA,oBADF,eAME,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,KAAKG,WADhB;AAEE,cAAA,EAAE,EAAC,GAFL;AAGE,cAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWY;AAHvB;AAAA;AAAA;AAAA;AAAA,oBANF,eAWE,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,KAAKG,WADhB;AAEE,cAAA,EAAE,EAAC,GAFL;AAGE,cAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWY;AAHvB;AAAA;AAAA;AAAA;AAAA,oBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnBF,eAqCE;AAAK,YAAA,KAAK,EAAE;AAAER,cAAAA,OAAO,EAAE;AAAX,aAAZ;AAAA,oCACE,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,KAAKW,WADhB;AAEE,cAAA,EAAE,EAAC,GAFL;AAGE,cAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWY;AAHvB;AAAA;AAAA;AAAA;AAAA,oBADF,eAME,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,KAAKG,WADhB;AAEE,cAAA,EAAE,EAAC,GAFL;AAGE,cAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWY;AAHvB;AAAA;AAAA;AAAA;AAAA,oBANF,eAWE,QAAC,MAAD;AACE,cAAA,OAAO,EAAE,KAAKG,WADhB;AAEE,cAAA,EAAE,EAAC,GAFL;AAGE,cAAA,QAAQ,EAAE,KAAKf,KAAL,CAAWY;AAHvB;AAAA;AAAA;AAAA;AAAA,oBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,kBArCF;AAAA;AAAA;AAAA;AAAA;AAAA,gBArBF,eA6EE;AAAK,UAAA,SAAS,EAAC,mHAAf;AAAA,kCACE;AAAG,YAAA,KAAK,EAAE;AAAER,cAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWM;AAAtB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAG,YAAA,KAAK,EAAE;AAAEF,cAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWK;AAAtB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAG,YAAA,KAAK,EAAE;AAAED,cAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWO;AAAtB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAME;AACE,YAAA,SAAS,EAAG,qDADd;AAEE,YAAA,KAAK,EAAE;AAAEH,cAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWQ;AAAtB,aAFT;AAGE,YAAA,IAAI,EAAC,QAHP;AAIE,YAAA,KAAK,EAAC,SAJR;AAKE,YAAA,OAAO,EAAE,KAAKW;AALhB;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA;AAAA;AAAA;AAAA;AAAA,gBA7EF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAmGE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,+BACE;AACE,UAAA,SAAS,EAAC,sBADZ;AAEE,UAAA,KAAK,EAAE;AAAEf,YAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWI;AAAtB,WAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAnGF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA+GD;;AArUgC;;AAwUnC,eAAeP,IAAf","sourcesContent":["// !------------------------------- IMPORTS -------------------------------- //\r\nimport React from \"react\";\r\nimport Button from \"./Button\";\r\nimport { Icon } from \"@iconify/react\"; // Cats icons (Copyright Concats)\r\n\r\nclass Grid extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      player1: \"X\", // Player 1\r\n      player2: \"O\", // Player 2\r\n      player1Turn: true, // Boolean to alternate between player 1 and Player 2\r\n\r\n      // Changing the display of our text in the render dynamically,\r\n      // according to the game scenarios :\r\n      display: \"none\",\r\n      displayP1Won: \"none\",\r\n      displayP2Won: \"none\",\r\n      displayDraw: \"none\",\r\n      displayRESTART: \"none\",\r\n      clickedBtns: [],\r\n      checkedBtnPlayer1: [], // Player 1's history of checked buttons\r\n      checkedBtnPlayer2: [], // Player 2's history of checked buttons\r\n      disabled: false,\r\n      winner: false, // Boolean to check if a player has won\r\n\r\n      // List of the winning combination lines :\r\n      winningLines: [\r\n        [\"0\", \"1\", \"2\"],\r\n        [\"3\", \"4\", \"5\"],\r\n        [\"6\", \"7\", \"8\"],\r\n        [\"0\", \"3\", \"6\"],\r\n        [\"1\", \"4\", \"7\"],\r\n        [\"2\", \"5\", \"8\"],\r\n        [\"0\", \"4\", \"8\"],\r\n        [\"2\", \"4\", \"6\"],\r\n      ],\r\n    };\r\n\r\n    // Bind functions\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.checkIfWinP1 = this.checkIfWinP1.bind(this);\r\n    this.checkIfWinP2 = this.checkIfWinP2.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n  }\r\n\r\n  // !------------------------------- FUNCTIONS -------------------------------- //\r\n\r\n  // Creating 2 functions that will create our users history of checked buttons (checkedBtnPlayer1 and checkedBtnPlayer2 arrays) and check if they contain any winning line at at every turn : the first user that has any of the winning lines wins and the game ends.\r\n\r\n  // Function to check if Player 2 has won :\r\n  checkIfWinP2() {\r\n    //Creating a map method that will iterate into the array of winning lines and check if any of them are inside the array of player 2's clicked buttons (checkedBtnPlayer2) : if so, the const containsAll return True, if not, it returns False :\r\n    this.state.winningLines.map((line) => {\r\n      const containsAll = line.every((elem) => {\r\n        return this.state.checkedBtnPlayer2.includes(elem);\r\n      });\r\n\r\n      //If the variable containsAll returns True, a winning notification get displayed in the page :\r\n      if (containsAll === true) {\r\n        this.setState({\r\n          displayP2Won: \"initial\",\r\n          displayRESTART: \"initial\",\r\n          displayDraw: \"none\",\r\n          winner: true,\r\n        });\r\n        //Creating a loop that will check every button : if it's part of the winning line, the background color turns into green :\r\n        for (let i = 0; i < line.length; i++) {\r\n          let id = line[i];\r\n          let allButtons = document.querySelectorAll(\"input\");\r\n\r\n          allButtons.forEach((button) => {\r\n            if (button.id === id) {\r\n              button.style.background = \"rgba(26, 175, 73, 0.5)\";\r\n            }\r\n          });\r\n        }\r\n        return console.log(\" Bravo ! Player 2 a gagné \", containsAll);\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n  // Function to check if Player 1 has won :\r\n  checkIfWinP1() {\r\n    //Creating a map method that will iterate into the array of winning lines and check if any of them are inside the array of player 1's clicked buttons (checkedBtnPlayer1) : if so, the const containsAll return True, if not, it returns False :\r\n    this.state.winningLines.map((line) => {\r\n      const containsAll = line.every((elem) => {\r\n        return this.state.checkedBtnPlayer1.includes(elem);\r\n      });\r\n      if (containsAll === true) {\r\n        this.setState({\r\n          displayP1Won: \"initial\",\r\n          displayRESTART: \"initial\",\r\n          displayDraw: \"none\",\r\n          winner: true,\r\n        });\r\n\r\n        //Creating a loop that will check every button : if it's part of the winning line, the background color turns into red :\r\n        for (let i = 0; i < line.length; i++) {\r\n          let id = line[i];\r\n          let allButtons = document.querySelectorAll(\"input\");\r\n\r\n          allButtons.forEach((button) => {\r\n            if (button.id === id) {\r\n              button.style.background = \"rgba(175, 26, 26, 0.4)\";\r\n            }\r\n          });\r\n        }\r\n\r\n        return console.log(\" Bravo ! Player 1 a gagné \", containsAll);\r\n      }\r\n      return null;\r\n    });\r\n  }\r\n\r\n  handleClick(e) {\r\n    // If the button's value is not empty, it means that the button is already clicked => the user can't select it and gets an error message :\r\n    if (e.target.value !== \"\") {\r\n      return this.setState(\r\n        {\r\n          display: \"initial\",\r\n        },\r\n        () => {\r\n          // Creating a setTimeOut method to remove the error message after 2 seconds :\r\n          setTimeout(() => {\r\n            this.setState({ display: \"none\" });\r\n          }, 1900);\r\n        }\r\n      );\r\n    }\r\n    // ---------------- PLAYER 2 ----------------- //\r\n\r\n    // Creating a condition to check whose turn it is (Player1's turn or Player2's turn): if the boolean Player1Turn is true, it means that the next move will be a \"X\" for Player 1. If Player1Turn is false, the next move will be a \"O\" for Player 2:\r\n\r\n    if (this.state.player1Turn === false) {\r\n      const copyArray2 = [...this.state.checkedBtnPlayer2, e.target.id];\r\n      this.setState(\r\n        {\r\n          player1Turn: true,\r\n        },\r\n        () => {\r\n          this.setState({ checkedBtnPlayer2: copyArray2 }, () => {\r\n            console.log(\"test Array player2: \", this.state.checkedBtnPlayer2);\r\n            e.target.value = this.state.player2;\r\n            e.target.className = \"styleO m-1 border\"; //style for O\r\n            this.checkIfWinP2();\r\n          });\r\n        }\r\n      );\r\n      // ---------------- PLAYER 1 ---------------- //\r\n    } else if (this.state.player1Turn === true) {\r\n      const copyArray1 = [...this.state.checkedBtnPlayer1, e.target.id];\r\n      this.setState(\r\n        {\r\n          player1Turn: false,\r\n        },\r\n        () => {\r\n          this.setState({ checkedBtnPlayer1: copyArray1 }, () => {\r\n            console.log(\"test Array player1: \", this.state.checkedBtnPlayer1);\r\n            e.target.value = this.state.player1;\r\n            e.target.className = \"styleX m-1 border\"; //style for X\r\n            this.checkIfWinP1();\r\n          });\r\n        }\r\n      );\r\n    }\r\n    const copyClickedBtns = this.state.clickedBtns; // Creating a copy of the clicked buttons's array\r\n    copyClickedBtns.push(e.target.id); // Adding the last clicked button to our copy array\r\n    this.setState({ clickedBtns: copyClickedBtns }); // Replacing our clicked buttons array with our updated copyArray\r\n\r\n    // Checking if the clicked buttons array is full (i.e, if it contains all of our buttons id) and if we do not have any winner : if so, we get a draw and the game is over. => a \"RESTART\" button is displayed\r\n\r\n    if (this.state.clickedBtns.length === 9 && this.state.winner === false) {\r\n      this.setState({ displayRESTART: \"initial\", displayDraw: \"initial\" });\r\n      console.log(\"match nul\");\r\n    }\r\n  }\r\n\r\n  // Checking if we have a winner : if so, the button are disabled so that the player cant keep playing.\r\n  componentDidUpdate(_prevProps, prevState) {\r\n    if (prevState.winner !== this.state.winner) {\r\n      if (this.state.winner === true) {\r\n        this.setState({ disabled: true });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Function that resets our buttons and elements at the end of a round  :\r\n  handleReset() {\r\n    this.setState({ disabled: false });\r\n    let clearbuttons = document.querySelectorAll(\"input\"); //we select every input\r\n\r\n    //If the inputs dont contain \"RESET\" nor \"RESTART\" we reset their value :\r\n    clearbuttons.forEach((button) => {\r\n      if (button.value !== \"RESET\" && button.value !== \"RESTART\") {\r\n        button.value = \"\";\r\n        button.style.background = \"transparent\";\r\n      }\r\n    });\r\n    this.setState({\r\n      checkedBtnPlayer1: [],\r\n      checkedBtnPlayer2: [],\r\n      clickedBtns: [],\r\n      player1Turn: true,\r\n      winner: false,\r\n    });\r\n    this.setState({\r\n      displayP2Won: \"none\",\r\n      displayP1Won: \"none\",\r\n      displayDraw: \"none\",\r\n      displayRESTART: \"none\",\r\n    });\r\n\r\n    console.log(\"RESET\");\r\n  }\r\n\r\n  // !------------------------------- RENDER -------------------------------- //\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"container-lg pt-4\">\r\n        {/* TITLE  */}\r\n        <h1 className=\"title text-center display-2\">\r\n          T<span className=\"span-title\">i</span>c T\r\n          <span className=\"span-title-red\">a</span>c{\" \"}\r\n          <span className=\"span-bg-black\"> Toe</span>\r\n        </h1>\r\n        <div className=\"row justify-content-center \">\r\n          <div className=\"col-lg-3 col-md-6  order-1 order-lg-1 rounded p-3 text-center m-2 d-flex flex-column justify-content-center align-items-center\">\r\n            {this.state.player1Turn ? (\r\n              <p>\r\n                Your turn <span className=\"red\">Player1</span> :{\" \"}\r\n                <span className=\"span-title-red \">X</span>\r\n              </p>\r\n            ) : (\r\n              <p>\r\n                Your turn <span className=\"green\">Player2</span> :{\" \"}\r\n                <span className=\"span-title\">O</span>\r\n              </p>\r\n            )}\r\n            <input\r\n              className={`btn btn-dark m-1 col-lg-7 col-md-6 col-sm-6 col-6`}\r\n              type=\"reset\"\r\n              value=\"RESET\"\r\n              onClick={this.handleReset}\r\n            />\r\n          </div>\r\n          {/* Div containing our Button components */}\r\n          <div className=\"col-lg-5 col-md-6  order-3 order-lg-3 rounded p-3 m-2  d-flex flex-column  justify-content-center align-items-center\">\r\n            <div style={{ display: \"flex\" }}>\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"0\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"1\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"2\"\r\n                disabled={this.state.disabled}\r\n              />\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\" }}>\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"3\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"4\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"5\"\r\n                disabled={this.state.disabled}\r\n              />\r\n            </div>\r\n\r\n            <div style={{ display: \"flex\" }}>\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"6\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"7\"\r\n                disabled={this.state.disabled}\r\n              />\r\n              <Button\r\n                onclick={this.handleClick}\r\n                id=\"8\"\r\n                disabled={this.state.disabled}\r\n              />\r\n            </div>\r\n          </div>\r\n          {/* Div containing are end of game messages */}\r\n          <div className=\"col-lg-3 col-md-6 order-3 order-lg-3 rounded p-3 m-2 d-flex flex-column justify-content-center align-items-center\">\r\n            <p style={{ display: this.state.displayP2Won }}>Player 2 won !!</p>\r\n            <p style={{ display: this.state.displayP1Won }}>Player 1 won !!</p>\r\n            <p style={{ display: this.state.displayDraw }}>\r\n              It's a draw... Play again?\r\n            </p>\r\n            <input\r\n              className={`btn m-1 col-lg-7 col-md-6 col-sm-6 col-6 btn-danger`}\r\n              style={{ display: this.state.displayRESTART }}\r\n              type=\"button\"\r\n              value=\"RESTART\"\r\n              onClick={this.handleReset}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row div-warning\">\r\n          <p\r\n            className=\"warning align-center\"\r\n            style={{ display: this.state.display }}\r\n          >\r\n            Box already ticked ! Please, select another one.\r\n          </p>\r\n        </div>\r\n\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Grid;\r\n"]},"metadata":{},"sourceType":"module"}